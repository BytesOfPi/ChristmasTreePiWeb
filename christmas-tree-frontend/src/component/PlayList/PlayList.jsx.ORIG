import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

// fake data generator
const getItems = (count, offset = 0) =>
    Array.from({ length: count }, (v, k) => k).map(k => ({
        id: `item-${k + offset}`,
        content: `item ${k + offset}`
    }));

// a little function to help us with reordering the result
const reorder = (list, startIndex, endIndex) => {
    const result = Array.from(list);
    const [removed] = result.splice(startIndex, 1);
    result.splice(endIndex, 0, removed);

    return result;
};

/**
 * Moves an item from one list to another list.
 */
const move = (source, destination, droppableSource, droppableDestination) => {
    const sourceClone = Array.from(source);
    const destClone = Array.from(destination);
    const [removed] = sourceClone.splice(droppableSource.index, 1);

    destClone.splice(droppableDestination.index, 0, removed);

    const result = {};
    result[droppableSource.droppableId] = sourceClone;
    result[droppableDestination.droppableId] = destClone;

    return result;
};

const grid = 8;

const getItemClass = (isDragging) => (
	isDragging ? 'card text-white bg-primary mb-3' : 'card text-white bg-success mb-3'
);
const getItemSelectClass = (isDragging) => (
	isDragging ? 'card text-white bg-success mb-3' : 'card text-white bg-primary mb-3'
);

const getItemStyle = (isDragging, draggableStyle) => (draggableStyle);

// const getItemStyle = (isDragging, draggableStyle) => (Object.assign({
//     // some basic styles to make the items look a bit nicer
//     userSelect: 'none',
//     padding: grid * 2,
//     margin: `0 0 ${grid}px 0`,

//     // change background colour if dragging
//     background: isDragging ? 'lightgreen' : 'grey',

//     // styles we need to apply on draggables
// }, draggableStyle) );

const getListStyle = isDraggingOver => ({
    background: isDraggingOver ? 'lightblue' : 'lightgrey',
    padding: grid,
    width: 250
});


	
class PlayList extends Component {
	constructor(props) {
		super(props);
		this.state = {
			items: getItems(10),
			selected: getItems(5, 10),
			/**
			 * A semi-generic way to handle multiple lists. Matches
			 * the IDs of the droppable container to the names of the
			 * source arrays stored in the state.
			 */
			id2List: {
				droppable: 'items',
				droppable2: 'selected'
			}
		};
		//---------------------------------------------------------------------
		// Bind methods to this component
		this.getList = this.getList.bind(this);
		this.onDragEnd = this.onDragEnd.bind(this);
	}

    getList(id) {
		return this.state[this.state.id2List[id]];
	}

    onDragEnd(result){
        const { source, destination } = result;

        // dropped outside the list
        if (!destination) {
            return;
        }

        if (source.droppableId === destination.droppableId) {
            const items = reorder(
                this.getList(source.droppableId),
                source.index,
                destination.index
            );

            let state = { items };

            if (source.droppableId === 'droppable2') {
                state = { selected: items };
            }

            this.setState(state);
        } else {
            const result = move(
                this.getList(source.droppableId),
                this.getList(destination.droppableId),
                source,
                destination
            );

            this.setState({
                items: result.droppable,
                selected: result.droppable2
            });
        }
    };

    // Normally you would want to split things out into separate components.
    // But in this example everything is just done in one place for simplicity
    render() {
        return (
		<div className="bs-docs-section">
				<DragDropContext onDragEnd={this.onDragEnd}>
				<div  className="form-group row">
					<div  className="col-lg-1 col-md-1 col-sm-1">
					<Droppable droppableId="droppable">
						{(provided, snapshot) => (
							<div
								ref={provided.innerRef}
								style={getListStyle(snapshot.isDraggingOver)}>
								{this.state.items.map((item, index) => (
									<Draggable
										key={item.id}
										draggableId={item.id}
										index={index}>
										{(provided, snapshot) => (
											<div
												ref={provided.innerRef}
												{...provided.draggableProps}
												{...provided.dragHandleProps}
												className={getItemClass(snapshot.isDragging)}
												style={getItemStyle(
													snapshot.isDragging,
													provided.draggableProps.style
												)}>
												{item.content}
											</div>
										)}
									</Draggable>
								))}
								{provided.placeholder}
							</div>
						)}
					</Droppable>
					<Droppable droppableId="droppable2">
						{(provided, snapshot) => (
							<div
								ref={provided.innerRef}
								style={getListStyle(snapshot.isDraggingOver)}>
								{this.state.selected.map((item, index) => (
									<Draggable
										key={item.id}
										draggableId={item.id}
										index={index}>
										{(provided, snapshot) => (
											<div
												ref={provided.innerRef}
												{...provided.draggableProps}
												{...provided.dragHandleProps}
												className={getItemSelectClass(snapshot.isDragging)}
												style={getItemStyle(
													snapshot.isDragging,
													provided.draggableProps.style
												)}>
												{item.content}
											</div>
										)}
									</Draggable>
								))}
								{provided.placeholder}
							</div>
						)}
					</Droppable>
					</div>
					</div>
				</DragDropContext>
		</div>
        );
    }
}

export default PlayList;